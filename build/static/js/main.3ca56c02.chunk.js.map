{"version":3,"sources":["Styles.js","Snake.js","Food.js","GameArea.js","SnakeGame.js","serviceWorker.js","index.js"],"names":["Styles","frameStyle","position","margin","width","height","backgroundColor","border","boxShadow","gameareaFrameStyle","top","right","left","bottom","display","flexDirection","justifyContent","alignItems","snakeDotStyle","foodStyle","background","Snake","props","snakeDots","map","dot","i","key","style","snakeStyle","Food","haight","zIndex","gamearea","show","onClick","clicked","children","getRandom","max","min","Math","floor","random","getRandomCoordinates","initialState","food","direction","speed","showGameArea","SnakeGame","state","onKeyPressed","e","keyCode","setState","moveSnake","dots","head","length","x","y","push","shift","checkIfOutOfBorders","checkIfCollapsed","checkIfEat","onPlayAgainClicked","setInterval","this","document","addEventListener","removeEventListener","onGameOver","snake","pop","forEach","enlargeSnake","increaseSpeed","newSnake","unshift","alert","GameArea","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3ca56c02.chunk.js","sourcesContent":["\r\nconst Styles = {\r\n    frameStyle: {\r\n        position: \"relative\",\r\n        margin: \"auto\",\r\n        width: \"600px\",\r\n        height: \"600px\",\r\n        backgroundColor: \"#000\",\r\n        border: \"3px solid #164bb1\",\r\n        boxShadow: \"0 0 20px 0 rgba(0, 0, 0, 0.2), 0 5px 5px 0 rgba(0, 0, 0, 0.24)\",\r\n    },\r\n\r\n    gameareaFrameStyle: {\r\n        margin: \"auto\",\r\n        width: \"300px\",\r\n        height: \"300px\",\r\n        backgroundColor: \"#fff\",\r\n        border: \"3px solid #164bb1\",\r\n        position: \"fixed\",\r\n        top: \"0\",\r\n        right: \"0\",\r\n        left: \"0\",\r\n        bottom: \"0\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\"\r\n    },\r\n  \r\n    snakeDotStyle: {\r\n        position: \"absolute\",\r\n        width: \"2%\",\r\n        height: \"2%\",\r\n        backgroundColor: \"rgb(250, 7, 31)\",\r\n        border: \"1px solid rgb(253, 247, 247)\",\r\n    },\r\n  \r\n    foodStyle: {\r\n        position: \"absolute\",\r\n        width: \"2%\",\r\n        height: \"2%\",\r\n        background: \"rgb(107, 107, 31)\",\r\n        border: \"1px solid rgb(2, 36, 18)\", \r\n    },\r\n};\r\n\r\nexport default Styles;\r\n  ","import React from 'react';\r\nimport Styles from './Styles';\r\n\r\nconst Snake = props => {\r\n    return (\r\n        <div>\r\n            {props.snakeDots.map((dot, i) => {\r\n                return (\r\n                    <div\r\n                        key={i}\r\n                        style={{\r\n                            ...Styles.snakeStyle,\r\n                            left: `${dot[0]}%`,\r\n                            top: `${dot[1]}%`,\r\n                        }}\r\n                    />\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Snake;","import React from \"react\";\r\nimport Styles from \"./Styles\";\r\n\r\nconst Food = props => {\r\n    return (\r\n        <div\r\n            style={{\r\n                ...Styles.foodStyle,\r\n                left: `${props.dot[0]}%`,\r\n                top: `${props.dot[1]}%`,\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Food;\r\n\r\n\r\n\r\n","import React from \"react\";\r\n\r\nconst style = {\r\n    width: \"100%\",\r\n    haight: \"100%\",\r\n    position: \"fixed\",\r\n    zIndex: \"100\",\r\n    left: \"0\",\r\n    top: \"0\",\r\n    backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n};\r\n\r\nconst gamearea = props =>\r\n    props.show ? (\r\n        <div style={style} onClick={props.clicked}>\r\n            {props.children}{\" \"}\r\n        </div>\r\n    ) : null;\r\n\r\nexport default gamearea;","import React, { Fragment, Component } from \"react\";\r\nimport Snake from \"./Snake\";\r\nimport Food from \"./Food\";\r\nimport GameArea from \"./GameArea\";\r\nimport Styles from \"./Styles\";\r\n\r\n\r\nfunction getRandom(max, min) {\r\n  return Math.floor((Math.random() * (max - min * 1) * min) / 2) * 2;\r\n};\r\n\r\nconst getRandomCoordinates = () => {\r\n  const min = 1;\r\n  const max = 98;\r\n  const x = getRandom(max, min);\r\n  const y = getRandom(max, min);\r\n  const position = [x, y];\r\n  return position;\r\n};\r\n\r\nconst initialState = {\r\n  food: getRandomCoordinates(),\r\n  direction:\"RIGHT\",\r\n  speed: 200,\r\n  snakeDots: [\r\n    [0,0],\r\n    [2,0],\r\n  ],\r\n  showGameArea: null,\r\n};\r\n\r\nclass SnakeGame extends Component {\r\n\r\n  state = initialState;\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    setInterval(this.moveSnake, this.state.speed);\r\n    document.addEventListener(\"keydown\", this.onKeyPressed);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.onKeyPressed);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    \r\n\r\n  }\r\n\r\n  onKeyPressed = (e) => {\r\n    switch (e.keyCode) {\r\n      case 38:\r\n        this.setState({ direction: \"UP\" });\r\n        break;\r\n      case 40:\r\n        this.setState({ direction: \"DOWN\" });\r\n        break;\r\n      case 37:\r\n        this.setState({ direction: \"LEFT\" });\r\n        break;\r\n      case 39:\r\n        this.setState({ direction: \"RIGHT\" });\r\n        break;\r\n      default:\r\n    }\r\n  };\r\n\r\n  moveSnake = () => {\r\n    let dots = [...this.state.snakeDots];\r\n    let head = dots[dots.length - 1];\r\n    const [x, y] = head;\r\n\r\n    switch (this.state.direction) {\r\n      case \"RIGHT\":\r\n        head = [x + 2, y];\r\n        break;\r\n      case \"LEFT\":\r\n        head = [x - 2, y];\r\n        break;\r\n      case \"DOWN\":\r\n        head = [x, y + 2];\r\n        break;\r\n      case 'UP':\r\n        head = [x, y - 2];\r\n        break;\r\n      default:\r\n        head = dots[dots.length - 1];\r\n    }\r\n\r\n    dots.push(head);\r\n    dots.shift();\r\n    this.setState({\r\n      snakeDots: dots\r\n    });\r\n\r\n    this.checkIfOutOfBorders(dots);\r\n    this.checkIfCollapsed(dots);\r\n    this.checkIfEat(dots);\r\n\r\n\r\n  };\r\n\r\n  checkIfOutOfBorders(snakeDots) {\r\n    if (this.state.showGameArea) {\r\n      return;\r\n    }\r\n    let head = snakeDots[snakeDots.length - 1];\r\n    const [x, y] = head;\r\n    if (x >= 100 || y >= 100 || x < 0 || y < 0) {\r\n      this.onGameOver();\r\n    }\r\n  }\r\n\r\n  checkIfCollapsed(snakeDots) {\r\n    if (this.state.showGameArea) {\r\n      return;\r\n    }\r\n    let snake = [...snakeDots];\r\n    let head = snake[snake.length - 1];\r\n    const [x, y] = head;\r\n    snake.pop();\r\n    snake.forEach(dot => {\r\n      if (x === dot[0] && y === dot[1]) {\r\n        this.onGameOver();\r\n      }\r\n    });\r\n  }\r\n\r\n  checkIfEat() {\r\n    if (this.state.showGameArea) {\r\n      return;\r\n    }\r\n    let head = this.snakeDots[this.snakeDots.length - 1];\r\n    let food = this.state.food;\r\n    const [x, y] = head;\r\n    if (x === food[0] && y === food[1]) {\r\n      this.setState({\r\n        food: getRandomCoordinates()\r\n      });\r\n      this.enlargeSnake();\r\n      this.increaseSpeed();\r\n    }\r\n  }\r\n\r\n  enlargeSnake() {\r\n    if (this.state.showGameArea) {\r\n      return;\r\n    }\r\n    let newSnake = [...this.state.snakeDots];\r\n    newSnake.unshift([]);\r\n    this.setState({\r\n      snakeDots: newSnake\r\n    });\r\n  }\r\n\r\n  increaseSpeed() {\r\n    if (this.state.speed > 10) {\r\n      this.setState({\r\n        speed: this.state.speed * 0.95,\r\n      });\r\n    }\r\n  }\r\n\r\n  onGameOver() {\r\n    alert(`Game Over. Snake lenth is ${this.state.snakeDots}`);\r\n    this.setState(initialState);\r\n  }\r\n\r\n  onPlayAgainClicked = () => {\r\n    this.setState(initialState);\r\n  };\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Fragment>\r\n          <GameArea show={this.state.showGameArea}>\r\n          </GameArea>\r\n\r\n        \r\n     \r\n\r\n          <div style={Styles.frameStyle}>\r\n            <Snake snakeDots={this.state.snakeDots} />\r\n            <Food dot={this.state.food} /> \r\n          </div>\r\n        </Fragment>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SnakeGame;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './SnakeGame';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}